tail(REMEMBER_locations)
sum(is.na(REMEMBER_locations))
mean(REMEMBER_locations)
View(REMEMBER_locations)
REMEMBER_locations <- list()
for(i in 1:1000){
loc <- data.frame(runif(100), runif(100))
REMEMBER_locations[[i]]<- loc
}
head(REMEMBER_locations)
length(REMEMBER_locations)
tail(REMEMBER_locations)
View(REMEMBER_locations)
# a
REMEMBER_locations <- list()
for(i in 1:1000){
loc <- data.frame(runif(100), runif(100))
colnames(loc) = c("x", "y")
REMEMBER_locations[[i]]<- loc
}
# b
mean_list = c()
for(i in 1:1000){
mean_list <- c(mean_list, mean(REMEMBER_locations[[i]]$x))
}
mean_list
hist(mean_list)
# Question2
# beta distribution: preference of 0.2
alpha <- 2  # Shape parameter 1
beta <- 8   # Shape parameter 2
# Generate random numbers from the beta distribution
random_number_clustering_to_0.2 <- rbeta(1, alpha, beta)
print(head(random_number_clustering_to_0.2))
library(readr)
library(ggpolypath)
library(ggplot2)
library(venn)
setwd("/Users/iris/Downloads/DEGs_filtered_updown_sorted")
DEG_day1_allEC_up <- read_csv("./DEG_day1_allEC_up_sorted.csv")
DEG_day1_allEC_down <- read_csv("./DEG_day1_allEC_down_sorted.csv")
DEG_day3_allEC_up <- read_csv("./DEG_day3_allEC_up_sorted.csv")
DEG_day3_allEC_down <- read_csv("./DEG_day3_allEC_down_sorted.csv")
DEG_day7_allEC_up <- read_csv("./DEG_day7_allEC_up_sorted.csv")
DEG_day7_allEC_down <- read_csv("./DEG_day7_allEC_down_sorted.csv")
intersect(DEG_day1_allEC_up, DEG_day3_allEC_up, DEG_day3_allEC_up)
intersect(c(DEG_day1_allEC_up, DEG_day3_allEC_up, DEG_day3_allEC_up))
Reduce(intersect, list(DEG_day1_allEC_up, DEG_day3_allEC_up, DEG_day3_allEC_up))
a <- Reduce(intersect, list(DEG_day1_allEC_up, DEG_day3_allEC_up, DEG_day3_allEC_up))
a
intersect(DEG_day1_allEC_up, DEG_day3_allEC_up)
Reduce(intersect, list(DEG_day1_allEC_up$gene, DEG_day3_allEC_up$gene, DEG_day7_allEC_up$gene))
setwd("/Users/iris/Downloads/DEGs_filtered_updown_sorted")
ucla_degs <- read_csv("./ucla_degs.csv")
ucla_degs <- ucla_degs[ucla_degs$`Cell Type` == "Endothelial",]
ucla_degs <- ucla_degs[ucla_degs$Log.fold.change > 0.25 | ucla_degs$Log.fold.change < -0.25,]
ucla_degs <- ucla_degs[ucla_degs$`P Value` > 5e-12,]
ucla_degs <- ucla_degs[(ucla_degs$Log.fold.change > 0 & ucla_degs$PCT.TBI > 0.1) | (ucla_degs$Log.fold.change < 0 & ucla_degs$PCT.Sham > 0.1),]
Reduce(intersect, list(DEG_day1_allEC_up$gene, DEG_day3_allEC_up$gene, DEG_day7_allEC_up$gene, ucla_degs$Gene[ucla_degs$Log.fold.change>0]))
ucla_degs$Gene[ucla_degs$Log.fold.change>0]
ucla_degs[ucla_degs$Log.fold.change>0]$Gene
ucla_degs[ucla_degs$Log.fold.change>0,]$Gene
ucla_degs[ucla_degs$Log.fold.change > 0,]
ucla_degs[ucla_degs$Log.fold.change > 0,]$Gene
ucla_degs[ucla_degs$Log.fold.change > 0,]
ucla_degs[ucla_degs$Log.fold.change > 0,"Gene"]
list(ucla_degs[ucla_degs$Log.fold.change > 0,"Gene"])
Reduce(intersect, list(DEG_day1_allEC_up$gene, DEG_day3_allEC_up$gene, DEG_day7_allEC_up$gene, ucla_degs[ucla_degs$Log.fold.change > 0,]$Gene))
Reduce(intersect, list(DEG_day1_allEC_up$gene, DEG_day3_allEC_up$gene, DEG_day7_allEC_up$gene, ucla_degs[ucla_degs$Log.fold.change > 0,"Gene"]))
Reduce(intersect, list(DEG_day1_allEC_up$gene, DEG_day3_allEC_up$gene, DEG_day7_allEC_up$gene))
Up_Us <- Reduce(intersect, list(DEG_day1_allEC_up$gene, DEG_day3_allEC_up$gene, DEG_day7_allEC_up$gene))
as.character(ucla_degs[ucla_degs$Log.fold.change > 0,"Gene"])
as.character(ucla_degs[ucla_degs$Log.fold.change > 0,]$Gene)
View(ucla_degs)
ucla_up <- ucla_degs[ucla_degs$Log.fold.change > 0,]
ucla_down <- ucla_degs[ucla_degs$Log.fold.change < 0,]
ucla_up$Gene
View(ucla_down)
View(ucla_up)
View(ucla_degs)
library(readr)
ucla_degs <- read_csv("Downloads/DEGs_filtered_updown_sorted/ucla_degs.csv",
na = "NA")
View(ucla_degs)
View(ucla_degs)
setwd("/Users/iris/Downloads/DEGs_filtered_updown_sorted")
#ucla_degs <- read_csv("./ucla_degs.csv")
ucla_degs <- ucla_degs[ucla_degs$`Cell Type` == "Endothelial",]
ucla_degs <- ucla_degs[ucla_degs$Log.fold.change > 0.25 | ucla_degs$Log.fold.change < -0.25,]
ucla_degs <- ucla_degs[ucla_degs$`P Value` > 5e-12,]
ucla_degs <- ucla_degs[(ucla_degs$Log.fold.change > 0 & ucla_degs$PCT.TBI > 0.1) | (ucla_degs$Log.fold.change < 0 & ucla_degs$PCT.Sham > 0.1),]
ucla_up <- ucla_degs[ucla_degs$Log.fold.change > 0,]
ucla_down <- ucla_degs[ucla_degs$Log.fold.change < 0,]
Up_withUCLA <- Reduce(intersect, list(DEG_day1_allEC_up$gene, DEG_day3_allEC_up$gene, DEG_day7_allEC_up$gene, ucla_up$Gene))
Up_withUCLA
Reduce(intersect, list(unique(c(DEG_day1_allEC_up$gene, DEG_day1_allEC_down$gene), unique(c(DEG_day3_allEC_up$gene, DEG_day3_allEC_down$gene)), unique(c(DEG_day7_allEC_up$gene, DEG_day7_allEC_down$gene)))
)
)
Reduce(intersect, list(unique(c(DEG_day1_allEC_up$gene, DEG_day1_allEC_down$gene)), unique(c(DEG_day3_allEC_up$gene, DEG_day3_allEC_down$gene)), unique(c(DEG_day7_allEC_up$gene, DEG_day7_allEC_down$gene))))
x <- list(
UCLA = ucla_degs$Gene,
TBI_Day1 = unique(c(DEG_day1_allEC_up$gene, DEG_day1_allEC_down$gene)),
TBI_Day3 = unique(c(DEG_day3_allEC_up$gene, DEG_day3_allEC_down$gene)),
TBI_Day7 = unique(c(DEG_day7_allEC_up$gene, DEG_day7_allEC_down$gene))
)
pdf("/Users/iris/Downloads/venn/mTBI_3days_withUCLA.pdf")
venn(x, ilab=TRUE, box = FALSE, ggplot = TRUE, size = 0, lty = "blank", zcolor = c("#CC99CC", "#f7cecc", "#9ccfe6", "#CCFF66"), sncs = 1.1, ilcs = 0.9)
dev.off()
Reduce(intersect, list(DEG_day1_allEC_down$gene, DEG_day3_allEC_down$gene, DEG_day7_allEC_down$gene))
Reduce(intersect, list(unique(c(DEG_day1_allEC_up$gene, DEG_day1_allEC_down$gene)), unique(c(DEG_day3_allEC_up$gene, DEG_day3_allEC_down$gene)), unique(c(DEG_day7_allEC_up$gene, DEG_day7_allEC_down$gene)), ucla_degs$Gene))
gset <- getGEO("GSE101689", GSEMatrix =TRUE, AnnotGPL=FALSE)
library(GEOquery)
BiocManager::install("GEOquery")
library(GEOquery)
library(limma)
library(umap)
install.packages("umap")
library(GEOquery)
library(limma)
library(umap)
gset <- getGEO("GSE101689", GSEMatrix =TRUE, AnnotGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL23812", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
View(gset)
fvarLabels(gset) <- make.names(fvarLabels(gset))
View(gset)
fvarLabels(gset)
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group membership for all samples
gsms <- "333000XXX111333000XX111XXXXXXXXXXXXXXXXXXXXXX2XXXX2X2X22"
sml <- strsplit(gsms, split="")[[1]]
# filter out excluded samples (marked as "X")
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
ex <- exprs(gset)
exprs(gset) <- log2(ex) # log2 transform
exprs(gset) <- normalizeBetweenArrays(exprs(gset)) # normalize data
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group membership for all samples
gsms <- "333000XXX111333000XX111XXXXXXXXXXXXXXXXXXXXXX2XXXX2X2X22"
sml <- strsplit(gsms, split="")[[1]]
# filter out excluded samples (marked as "X")
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
gset <- getGEO("GSE101689", GSEMatrix =TRUE, AnnotGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL23812", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group membership for all samples
gsms <- "333000XXX111333000XX111XXXXXXXXXXXXXXXXXXXXXX2XXXX2X2X22"
sml <- strsplit(gsms, split="")[[1]]
# filter out excluded samples (marked as "X")
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
ex <- exprs(gset)
ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) # log2 transform
exprs(gset) <- normalizeBetweenArrays(exprs(gset)) # normalize data
# assign samples to groups and set up design matrix
gs <- factor(sml)
groups <- make.names(c("APP-Clec7a-POS","APP-Clec7a-NEG","widetype-Clec7a-POS","widetype-Clec7a-NEG"))
levels(gs) <- groups
gset$group <- gs
design <- model.matrix(~group + 0, gset)
colnames(design) <- levels(gs)
gset <- gset[complete.cases(exprs(gset)), ] # skip missing values
# calculate precision weights and show plot of mean-variance trend
v <- vooma(gset, design, plot=T)
# OR weights by group
# v <- voomaByGroup(gset, group=groups, design, plot=T, cex=0.1, pch=".", col=1:nlevels(gs))
v$genes <- fData(gset) # attach gene annotations
fData(gset)
View(v)
# fit linear model
fit  <- lmFit(v)
# set up contrasts of interest and recalculate model coefficients
cts <- c(paste(groups[1],"-",groups[2],sep=""), paste(groups[1],"-",groups[4],sep=""), paste(groups[2],"-",groups[4],sep=""))
cont.matrix <- makeContrasts(contrasts=cts, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
# compute statistics and table of top significant genes
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="bonferroni", sort.by="B", number=250)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","F","GB_ACC","SEQUENCE"))
write.table(tT, file=stdout(), row.names=F, sep="\t")
View(fit2)
# fit linear model
fit  <- lmFit(v)
# set up contrasts of interest and recalculate model coefficients
cts <- c(paste(groups[1],"-",groups[2],sep=""), paste(groups[1],"-",groups[4],sep=""), paste(groups[2],"-",groups[4],sep=""))
cont.matrix <- makeContrasts(contrasts=cts, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
# compute statistics and table of top significant genes
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="bonferroni", sort.by="B", number=250)
tT <- subset(tT, select=c("Gene_ID","adj.P.Val","P.Value","F","GB_ACC","SEQUENCE"))
write.table(tT, file=stdout(), row.names=F, sep="\t")
# fit linear model
fit  <- lmFit(v)
# set up contrasts of interest and recalculate model coefficients
cts <- c(paste(groups[1],"-",groups[2],sep=""), paste(groups[1],"-",groups[4],sep=""), paste(groups[2],"-",groups[4],sep=""))
cont.matrix <- makeContrasts(contrasts=cts, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
# compute statistics and table of top significant genes
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="bonferroni", sort.by="B", number=500)
tT <- subset(tT, select=c("Gene_ID","adj.P.Val","P.Value","F","GB_ACC","SEQUENCE"))
write.table(tT, file=stdout(), row.names=F, sep="\t")
# fit linear model
fit  <- lmFit(v)
# set up contrasts of interest and recalculate model coefficients
cts <- c(paste(groups[1],"-",groups[2],sep=""), paste(groups[1],"-",groups[4],sep=""), paste(groups[2],"-",groups[4],sep=""))
cont.matrix <- makeContrasts(contrasts=cts, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
# compute statistics and table of top significant genes
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="bonferroni", sort.by="B", number=500)
tT <- subset(tT, select=c("Gene_ID","adj.P.Val","P.Value","F","GB_ACC","SEQUENCE"))
write.table(tT, file="across_4_conditions", row.names=F, sep="\t")
View(fit2)
# fit linear model
fit  <- lmFit(v)
# set up contrasts of interest and recalculate model coefficients
cts <- c(paste(groups[1],"-",groups[2],sep=""), paste(groups[1],"-",groups[4],sep=""), paste(groups[2],"-",groups[4],sep=""))
cont.matrix <- makeContrasts(contrasts=cts, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
# compute statistics and table of top significant genes
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="bonferroni", sort.by="B", number=600)
tT <- subset(tT, select=c("Gene_ID","adj.P.Val","P.Value","F","GB_ACC","SEQUENCE"))
write.table(tT, file="across_4_conditions", row.names=F, sep="\t")
# fit linear model
fit  <- lmFit(v)
# set up contrasts of interest and recalculate model coefficients
#cts <- c(paste(groups[1],"-",groups[2],sep=""), paste(groups[1],"-",groups[4],sep=""), paste(groups[2],"-",groups[4],sep=""))
cts <- c(paste(groups[1],"-",groups[2],sep=""))
cont.matrix <- makeContrasts(contrasts=cts, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
# compute statistics and table of top significant genes
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="bonferroni", sort.by="B", number=600)
tT <- subset(tT, select=c("Gene_ID","adj.P.Val","P.Value","F","GB_ACC","SEQUENCE"))
# fit linear model
fit  <- lmFit(v)
# set up contrasts of interest and recalculate model coefficients
#cts <- c(paste(groups[1],"-",groups[2],sep=""), paste(groups[1],"-",groups[4],sep=""), paste(groups[2],"-",groups[4],sep=""))
cts <- c(paste(groups[1],"-",groups[2],sep=""))
cont.matrix <- makeContrasts(contrasts=cts, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
# compute statistics and table of top significant genes
fit2 <- eBayes(fit2, 0)
tT <- topTable(fit2, adjust="bonferroni", sort.by="B", number=600)
tT <- subset(tT, select=c("Gene_ID","adj.P.Val","P.Value","F","GB_ACC","SEQUENCE"))
# fit linear model
fit  <- lmFit(v)
# set up contrasts of interest and recalculate model coefficients
cts <- c(paste(groups[1],"-",groups[2],sep=""), paste(groups[1],"-",groups[4],sep=""), paste(groups[2],"-",groups[4],sep=""))
#cts <- c(paste(groups[1],"-",groups[2],sep=""))
cont.matrix <- makeContrasts(contrasts=cts, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
# compute statistics and table of top significant genes
fit2 <- eBayes(fit2, 0)
tT <- topTable(fit2, adjust="bonferroni", sort.by="B", number=600)
tT <- subset(tT, select=c("Gene_ID","adj.P.Val","P.Value","F","GB_ACC","SEQUENCE"))
write.table(tT, file="across_4_conditions", row.names=F, sep="\t")
View(fit2)
v$genes$Gene_ID
gset <- getGEO("GSE101689", GSEMatrix =TRUE, AnnotGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL23812", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
library(GEOquery)
library(limma)
library(umap)
gset <- getGEO("GSE101689", GSEMatrix =TRUE, AnnotGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL23812", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group membership for all samples
gsms <- "333000XXX111333000XX111XXXXXXXXXXXXXXXXXXXXXX2XXXX2X2X22"
sml <- strsplit(gsms, split="")[[1]]
# filter out excluded samples (marked as "X")
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
ex <- exprs(gset)
ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) # log2 transform
exprs(gset) <- normalizeBetweenArrays(exprs(gset)) # normalize data
# assign samples to groups and set up design matrix
gs <- factor(sml)
groups <- make.names(c("APP-Clec7a-POS","APP-Clec7a-NEG","widetype-Clec7a-POS","widetype-Clec7a-NEG"))
levels(gs) <- groups
gset$group <- gs
design <- model.matrix(~group + 0, gset)
colnames(design) <- levels(gs)
gset <- gset[complete.cases(exprs(gset)), ] # skip missing values
View(gset)
library(GEOquery)
library(limma)
library(umap)
gset <- getGEO("GSE101689", GSEMatrix =TRUE, AnnotGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL23812", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
View(gset)
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group membership for all samples
gsms <- "333000XXX111333000XX111XXXXXXXXXXXXXXXXXXXXXX2XXXX2X2X22"
sml <- strsplit(gsms, split="")[[1]]
# filter out excluded samples (marked as "X")
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
ex <- exprs(gset)
ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) # log2 transform
exprs(gset) <- normalizeBetweenArrays(exprs(gset)) # normalize data
# assign samples to groups and set up design matrix
gs <- factor(sml)
groups <- make.names(c("APP-Clec7a-POS","APP-Clec7a-NEG","widetype-Clec7a-POS","widetype-Clec7a-NEG"))
levels(gs) <- groups
gset$group <- gs
design <- model.matrix(~group + 0, gset)
colnames(design) <- levels(gs)
gset <- gset[complete.cases(exprs(gset)), ] # skip missing values
# calculate precision weights and show plot of mean-variance trend
v <- vooma(gset, design, plot=T)
# OR weights by group
# v <- voomaByGroup(gset, group=groups, design, plot=T, cex=0.1, pch=".", col=1:nlevels(gs))
v$genes <- fData(gset) # attach gene annotations
# fit linear model
fit  <- lmFit(v)
# set up contrasts of interest and recalculate model coefficients
cts <- c(paste(groups[1],"-",groups[2],sep=""), paste(groups[1],"-",groups[4],sep=""), paste(groups[2],"-",groups[4],sep=""))
#cts <- c(paste(groups[1],"-",groups[2],sep=""))
cont.matrix <- makeContrasts(contrasts=cts, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
# compute statistics and table of top significant genes
fit2 <- eBayes(fit2, 0)
tT <- topTable(fit2, adjust="bonferroni", sort.by="B", number=600)
tT <- subset(tT, select=c("Gene_ID","adj.P.Val","P.Value","F","GB_ACC","SEQUENCE"))
write.table(tT, file="across_4_conditions", row.names=F, sep="\t")
View(tT)
View(fit2)
fit2[["design"]]
colnames(fit2)
fit2[1]
fit2[[1]
]
fit2[[2]]
test <-topTable(fit2, adjust="bonferroni", sort.by="B", number=600)
View(test)
colnames(temp)
colnames(test)
test1 <- <- subset(test, select=c("Gene_ID","adj.P.Val","P.Value","APP.Clec7a.POS.APP.Clec7a.NEG","GB_ACC","SEQUENCE"))
test1 <- subset(test, select=c("Gene_ID","adj.P.Val","P.Value","APP.Clec7a.POS.APP.Clec7a.NEG"))
write.table(test1, file="APP_condition_Cle+vsCle-", row.names=F, sep="\t")
test2 <- <- subset(test, select=c("Gene_ID","adj.P.Val","P.Value","APP.Clec7a.NEG.widetype.Clec7a.NEG","GB_ACC","SEQUENCE"))
test2 <- subset(test, select=c("Gene_ID","adj.P.Val","P.Value","APP.Clec7a.NEG.widetype.Clec7a.NEG","GB_ACC","SEQUENCE"))
write.table(test1, file="Clec7a-_condition_WildvsAPP-", row.names=F, sep="\t")
volcanoplot(fit2, coef=1, main=colnames(fit2)[1], pch=20,
highlight=length(which(dT[,ct]!=0)), names=rep('+', nrow(fit2)))
volcanoplot(fit2, coef=1, main=colnames(fit2)[1], pch=20,
highlight=length(which(dT[,1]!=0)), names=rep('+', nrow(fit2)))
volcanoplot(fit2, coef=1, main=colnames(fit2)[1], pch=20,
highlight=length(which(dT[,1]!=0)), names=rep('+', nrow(fit2)))
write.table(test2, file="Clec7a-_condition_WildvsAPP-", row.names=F, sep="\t")
gset <- getGEO("GSE98969", GSEMatrix =TRUE, AnnotGPL=FALSE)
library(GEOquery)
library(limma)
library(umap)
gset <- getGEO("GSE98969", GSEMatrix =TRUE, AnnotGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL23812", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
View(gset)
gset@annotation
fvarLabels(gset) <- make.names(fvarLabels(gset))
View(gset)
ex <- exprs(gset)
View(ex)
gset <- getGEO("GSE98969", GSEMatrix =TRUE, AnnotGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL19057", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
View(gset)
ex <- exprs(gset)
View(ex)
gset <- getGEO("GSE98969", GSEMatrix =TRUE, AnnotGPL=FALSE)
View(gset)
gset <- gset[[1]]
ex <- exprs(gset)
fvarLabels(gset) <- make.names(fvarLabels(gset))
ex <- exprs(gset)
View(ex)
View(gset)
gset <- getGEO("GSE98969", GSEMatrix =TRUE)
View(gset)
gset <- getGEO("GSE98969")
View(gset)
setwd("~/Downloads/AD_RNA")
library(GEOquery)
library(DESeq2)
BiocManager::install("DESeq2")
library(GEOquery)
library(DESeq2)
#read
gse <- getGEO("GSE98969",GSEMatrix=TRUE)
gse  <- gse[[1]]
sample_info <- pData(gse)
gse <- exprs(gse)
View(sample_info)
unique(sample_info$data_processing.1)
unique(sample_info$description.1)
selected_samples <- sample_info[sample_info$des %in% c("WT", "AD"), ]
View(selected_samples)
selected_samples <- sample_info[sample_info$description.1 %in% c("WT", "AD"), ]
View(selected_samples)
selected_samples <- sample_info[c("WT", "AD") %in% sample_info$description.1, ]
selected_samples <- sample_info[AD" %in% sample_info$description.1, ]
/
"
selected_samples <- sample_info["AD" %in% sample_info$description.1, ]
"AD" %in% sample_info$description.1
sample_info$description.1
("grepl("^(AD|WT)", sample_info$description.1)
)
"
grepl("^(AD|WT)", sample_info$description.1
)
grepl("^(AD|WT)", sample_info$description.1)
selected_samples <- sample_info[grepl("^(AD|WT)", sample_info$description.1), ]
sample_info[grepl("^(AD)", sample_info$description.1), ]
selected_samples[grepl("^(AD)", selected_samples$description.1), ]$description.1 < "AD"
selected_samples[grepl("^(AD)", selected_samples$description.1), ]$description.1 <- "AD"
selected_samples[grepl("^(WT)", selected_samples$description.1), ]$description.1 <- "WT"
library(GEOquery)
library(DESeq2)
sample_info <- pData(gse)
View(gse)
gse <- exprs(gse)
#read
gse <- getGEO("GSE98969",GSEMatrix=TRUE)
gse  <- gse[[1]]
sample_info <- pData(gse)
gse <- exprs(gse)
#read
gse <- getGEO("GSE98969",GSEMatrix=TRUE)
gse  <- gse[[1]]
#read
gse <- getGEO("GSE98969",GSEMatrix=TRUE)
#gse  <- gse[[1]]
gse <- getGEO("GSE98969", GSEMatrix=TRUE)
gse <- exprs(gse)
#read
gse <- getGEO("GSE98969", GSEMatrix=FALSE)
#gse  <- gse[[1]]
gse  <- gse[[1]]
gse <- exprs(gse)
gse <- exprs(gse)
gse <- exprs(gse)
#read
gse <- getGEO("GSE98969", GSEMatrix=TRUE)
#gse  <- gse[[1]]
View(gset)
#read
gse <- getGEO("GSE98969", GSEMatrix=TRUE)
#gse  <- gse[[1]]
#read
gse <- getGEO("GSE98969", GSEMatrix=TRUE)
#gse  <- gse[[1]]
gse  <- gse[[1]]
gse <- exprs(gse)
#read
gse <- getGEO("GSE98969", GSEMatrix=TRUE)
#gse  <- gse[[1]]
data=CreateSeuratObject(raw.data = gse)
library(Seurat)
data=CreateSeuratObject(raw.data = gse)
data=CreateSeuratObject(raw.data = gse[[1]])
#read
gse <- getGEO("GSE98969", GSEMatrix=TRUE)
#gse  <- gse[[1]]
View(gse)
#read
gse <- getGEO("GSE98969", GSEMatrix=FALSE)
#gse  <- gse[[1]]
View(gset)
View(gse)
metadata <- pData(gse[[1]])
#read
gse <- getGEO("GSE98969", GSEMatrix=TRUE)
#gse  <- gse[[1]]
gse <- getGEO("GSE98969", GSEMatrix=TRUE)
metadata <- pData(gse[[1]])
setwd("~/Downloads/AD_RNA")
tar_file_path <- "/Users/iris/Downloads/GSE98969_RAW (1).tar"
extraction_path <- "/Users/iris/Downloads/AD_RNA"
untar(tarfile = tar_file_path, exdir = extraction_path)
geo_dataset <- "GSE98969"  # Replace with the actual dataset accession number
geo_data <- getGEO(geo_dataset, destdir = extraction_path)
View(geo_data)
geo_dataset <- "GSE98969"  # Replace with the actual dataset accession number
geo_data <- getGEO(geo_dataset, destdir = extraction_path, GSEMatrix=TRUE)
View(geo_data)
geo_dataset <- "GSE98969"  # Replace with the actual dataset accession number
geo_data <- getGEO(geo_dataset, destdir = extraction_path, GSEMatrix=FALSE)
View(geo_data)
